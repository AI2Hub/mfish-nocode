<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.mfish.oauth.mapper.SsoUserMapper">
    <sql id="byAccount">
        (1!=1
        <if test="account != null and account != ''">
            or account = #{account}
            or phone = #{account}
            or email = #{account}
        </if>
        )
    </sql>
    <select id="getUserByAccount" resultType="cn.com.mfish.oauth.entity.SsoUser">
        select * from sso_user
        <where>
            <include refid="byAccount"/>
        </where>
    </select>
    <sql id="userRolesCondition">
        <where>
            r.status = 0 and r.del_flag = 0 and u.id = #{userId}
            <if test="tenantId!= null and tenantId != ''">
                and r.tenant_id = #{tenantId}
            </if>
        </where>
    </sql>
    <select id="getUserRoles" resultType="cn.com.mfish.common.oauth.api.entity.UserRole">
        select r.id, r.role_name, r.role_code, 0 source
        from sso_user u
        inner join sso_user_role ur on ur.user_id = u.id
        inner join sso_role r on r.id = ur.role_id
        <include refid="userRolesCondition" />
        union
        select r.id, r.role_name, r.role_code,1 source
        from sso_user u
        inner join sso_org_user ou on u.id = ou.user_id
        inner join sso_org_role sor on ou.org_id = sor.org_id
        INNER JOIN sso_role r on r.id = sor.role_id
        <include refid="userRolesCondition" />
    </select>
    <sql id="userPerCondition">
        <where>
            u.id = #{userId}
            and m.permissions is not null
            and m.permissions != ''
        </where>
    </sql>
    <select id="getUserPermissions" resultType="java.lang.String">
        select GROUP_CONCAT(u.permissions) permissions from (
        select u.id,m.permissions
        from sso_user u
        inner join sso_user_role ur on ur.user_id = u.id
        inner join sso_role r on r.id = ur.role_id
        <if test="tenantId!= null and tenantId != ''">
            and r.tenant_id = #{tenantId}
        </if>
        inner join sso_role_menu rm on rm.role_id = ur.role_id
        inner join sso_menu m on rm.menu_id = m.id
        <include refid="userPerCondition" />
        union
        select u.id,m.permissions
        from sso_user u
        inner join sso_org_user ou on u.id = ou.user_id
        inner join sso_org o on o.id = ou.org_id
        <if test="tenantId!= null and tenantId != ''">
            and o.tenant_id = #{tenantId}
        </if>
        inner join sso_org_role sor on ou.org_id = sor.org_id
        inner join sso_role_menu rm on rm.role_id = sor.role_id
        inner join sso_menu m on rm.menu_id = m.id
        <include refid="userPerCondition" /> ) u
        group by u.id
        order by u.permissions
    </select>
    <select id="getUserTenants" resultType="cn.com.mfish.oauth.vo.TenantVo">
        SELECT t.*, if(ISNULL(u.id), 0, 1) master, su.account
        from sso_tenant t
                 left join sso_user u on t.user_id = u.id
                 INNER JOIN sso_org o on t.id = o.tenant_id
                 INNER JOIN sso_org_user ou on ou.org_id = o.id and ou.user_id = #{userId}
                 INNER JOIN sso_user su ON su.id = ou.user_id
        order by master desc
    </select>
    <select id="isAccountExist" resultType="java.lang.Integer">
        select count(0) from sso_user
        <where>
            <include refid="byAccount"/>
            <if test="userId != null and userId != ''">
                and id != #{userId}
            </if>
        </where>
    </select>
    <resultMap id="userMap" type="cn.com.mfish.common.oauth.api.entity.UserInfo">
        <result property="roleIds" column="roleIds"
                typeHandler="cn.com.mfish.oauth.handler.StrToListTypeHandler"></result>
    </resultMap>
    <resultMap id="ssoUserMap" type="cn.com.mfish.oauth.entity.SsoUser">
        <result property="roleIds" column="roleIds"
                typeHandler="cn.com.mfish.oauth.handler.StrToListTypeHandler"></result>
    </resultMap>
    <sql id="selectUser">
        select u.*, GROUP_CONCAT(role_id) roleIds
        from (select u.*, o.org_name, ou.org_id, ur.role_id
              from sso_user u
                       left join sso_org_user ou on ou.user_id = u.id
                       left join sso_org o on o.id = ou.org_id
                       left join sso_user_role ur on u.id = ur.user_id
              union
              select u.*, o.org_name, ou.org_id, sor.role_id
              from sso_user u
                       left join sso_org_user ou on ou.user_id = u.id
                       left join sso_org o on o.id = ou.org_id
                       left join sso_org_role sor on sor.org_id = o.id) u
    </sql>
    <select id="getUserById" resultMap="ssoUserMap">
        <include refid="selectUser"/>
        <where>
            u.id = #{userId}
        </where>
        group by u.id
    </select>
    <select id="getUserList" resultMap="userMap">
        <include refid="selectUser"/>
        <where>
            u.del_flag = 0
            <if test="orgId != null and orgId != ''">
                and u.org_id = #{orgId}
            </if>
            <if test="phone != null and phone != ''">
                and u.phone like concat('%',#{phone},'%')
            </if>
            <if test="account != null and account != ''">
                and u.account like concat('%',#{account},'%')
            </if>
            <if test="nickname != null and nickname != ''">
                and u.nickname like concat('%',#{nickname},'%')
            </if>
            <if test="status != null">
                and u.status = #{status}
            </if>
        </where>
        group by u.id
        order by u.create_time desc
    </select>
    <insert id="insertUserRole">
        insert into sso_user_role(role_id, user_id) values
        <foreach collection="roles" item="role" separator=",">
            (#{role},#{userId})
        </foreach>
    </insert>
    <insert id="insertUserOrg">
        insert into sso_org_user(org_id, user_id) values
        <foreach collection="orgList" item="org" separator=",">
            (#{org},#{userId})
        </foreach>
    </insert>
    <delete id="deleteUserOrg">
        delete from sso_org_user
        <where>
            user_id = #{userId}
            <if test="orgId != null and orgId != ''">
                and org_id = #{orgId}
            </if>
        </where>
    </delete>
</mapper>